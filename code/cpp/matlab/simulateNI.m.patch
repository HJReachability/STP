diff --git a/code/@SPPProblem/simulateNI.m b/code/@SPPProblem/simulateNI.m
index f5301aa..1e8a86c 100644
--- a/code/@SPPProblem/simulateNI.m
+++ b/code/@SPPProblem/simulateNI.m
@@ -1,4 +1,4 @@
-function simulateNI(obj, save_png, save_fig, NI_RS_filename)
+function simulateNI(obj, save_png, save_fig, NI_RS_filename, CPP_RTTRS_file, CPP_NIRS_file, separatedNIRS)
 % simulateNI(obj, save_png, save_fig)
 %     Simulates SPP with disturbances with the RTT method
 
@@ -14,22 +14,82 @@ if nargin < 4
   NI_RS_filename = obj.NI_RS_filename;
 end
 
+if nargin < 5
+  CPP_RTTRS_file = false;
+end
+
+if nargin < 6
+  CPP_NIRS_file = false;
+end
+
+if nargin < 7
+    separatedNIRS = false;
+end
+
 %% Load files
 % Load robust tracking reachable set
 if exist(obj.RTTRS_filename, 'file')
   fprintf('Loading RTTRS...\n')
-  load(obj.RTTRS_filename)
+  if (CPP_RTTRS_file == 1)
+    RTTRS = loadRTTRS(obj.RTTRS_filename);
+  else
+    load(obj.RTTRS_filename)
+  end
 else
   error('RTTRS file not found!')
 end
 
 % Load path planning reachable set
-if exist(NI_RS_filename, 'file')
-  fprintf('Loading RS data...\n')
-  load(NI_RS_filename)
-else
-  error('RS file not found!')
-end
+fprintf('Loading RS data...\n')
+if (CPP_NIRS_file == 1)
+    if separatedNIRS
+        numVeh = length(obj.tTarget);
+        for vehicle=1:numVeh
+            Plane_filename = sprintf('%s%d.mat', obj.NI_RS_filename, vehicle-1);
+            if ~exist(Plane_filename, 'file')
+                % last file may not be completed file.
+                fprintf('Simulate NI for %d vehicles which have computed traj...\n', vehicle-2)
+                numVeh = vehicle-2;
+                break;
+            end
+        end
+        Q = cell(numVeh, 1);
+        for vehicle=1:numVeh
+            Plane_filename = sprintf('%s%d.mat', obj.NI_RS_filename, vehicle-1);
+            if exist(Plane_filename, 'file')
+                fprintf('Loading %dth vehicle...\n', vehicle-1)
+                load(Plane_filename);
+                Q{vehicle} = cpp2matSPPPlane(Qthis, obj.gN);
+                clear Qthis;
+                % remove large unused data.
+                Q{vehicle}.BRS1 = [];
+                if exist('obstacles', 'var')
+                    clear obstacles;
+                end
+                if ~isempty(Q{vehicle}.BRS1)
+                    [g2D, data2D] = proj(obj.g, Q{vehicle}.BRS1, [0 0 1], Qthis.x(3));
+                    figure;
+                    visSetIm(g2D, data2D);
+                    close;
+                end
+            else
+                break;
+            end
+        end
+    else
+      Q = loadNIRS(obj.NI_RS_filename, obj.gN, false);
+    end
+  else
+    load(obj.NI_RS_filename)
+  end
+  if exist('obstacles', 'var')
+    figure;
+    for t=1:length(obstacles.data)
+        obs = reshape(obstacles.data{t}, obj.gN);
+        surf(obs(:,:,1))
+        drawnow
+    end
+  end
 
 %% Post process loaded data
 % Compute gradients used for optimal control
